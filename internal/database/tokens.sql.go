// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getRefreshTokenAndExpiry = `-- name: GetRefreshTokenAndExpiry :one
SELECT token, expires_at, revoked_at
FROM refresh_tokens
WHERE token = $1
`

type GetRefreshTokenAndExpiryRow struct {
	Token     string
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetRefreshTokenAndExpiry(ctx context.Context, token string) (GetRefreshTokenAndExpiryRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenAndExpiry, token)
	var i GetRefreshTokenAndExpiryRow
	err := row.Scan(&i.Token, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT user_id
FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3
)
`

type InsertRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET revoked_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE token = $1
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}
